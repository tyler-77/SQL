# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL );

SELECT * FROM BIT_DB.Spotifydata LIMIT 5;

# Who are the top 10 artists based on popularity?
SELECT artist_name
FROM BIT_DB.Spotifydata 
GROUP BY artist_name
ORDER BY popularity DESC
LIMIT 10;

# What artist released the longest song and how long was it?
SELECT artist_name,
duration_ms
FROM BIT_DB.Spotifydata
ORDER BY duration_ms DESC
LIMIT 1;

# What are the 10 songs with the fastest tempo?
SELECT track_name
FROM BIT_DB.Spotifydata
ORDER BY tempo DESC LIMIT 10;

# What's the average danceability?
SELECT AVG(danceability)
FROM BIT_DB.Spotifydata;

# Order each song by danceability and note whether it is above or below the average danceability.
SELECT distinct track_name, danceability,
CASE WHEN danceability>.68 THEN 'Above Average'
WHEN danceability=.68 THEN 'Average'
ELSE 'Below Average' 
END AS Level_of_Danceability
FROM BIT_DB.Spotifydata
GROUP BY track_name
ORDER BY danceability DESC;


